https://leetcode.com/problems/distinct-subsequences/


class Solution {
public:
    int rec(string &s, string &t,int i,int j){
        if(j>=t.size()) return 1;
        if(i>=s.size()) return 0;
        int include=0;
        if(s[i]==t[j]) include=rec(s,t,i+1,j+1);
        int exclude=rec(s,t,i+1,j);
        return include+exclude;
    }
    int memo(string &s, string &t,int i,int j,vector<vector<int>> &dp){
        if(j>=t.size()) return 1;
        if(i>=s.size()) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        int include=0;
        if(s[i]==t[j]) include=memo(s,t,i+1,j+1,dp);
        int exclude=memo(s,t,i+1,j,dp);
        return dp[i][j]=include+exclude;
    }
    int bottum(string &s,string &t){
        vector<vector<int>> dp(s.size()+1,vector<int>(t.size()+1,0));
        //yaha galti hogi. i<s.size() tk nhi i<=s.size() hona chaiye 
        for(int i=0;i<=s.size();i++) dp[i][t.size()]=1;
        for(int i=s.size()-1;i>=0;i--){
            for(int j=t.size()-1;j>=0;j--){
                long long ans=0;
                if(s[i]==t[j]) ans+=dp[i+1][j+1];
                ans+=dp[i+1][j];
                dp[i][j]=ans;
            }
        }
        return dp[0][0];
    }
    int numDistinct(string s, string t) {
        return bottum(s,t);
        /* vector<vector<int>> dp(s.size()+1,vector<int>(t.size()+1,-1));
        return memo(s,t,0,0,dp); */
        //return rec(s,t,0,0);
    }
};
