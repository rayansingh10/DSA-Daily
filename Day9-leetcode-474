https://leetcode.com/problems/ones-and-zeroes/description/

class Solution {
public:
    pair<int,int> check(string a){
        pair<int,int> ans={0,0};
        for(int i=0;i<a.size();i++){
            a[i]=='0'? ans.first++ : ans.second++;
        }
        return ans;
    }
    int rec(vector<string>& strs,int m,int n,int index){
        if(index>=strs.size()) return 0;
        int include=0,exclude=0;
        pair<int,int> count=check(strs[index]);
        if(count.first<=m && count.second<=n){
            include=1+rec(strs,m-count.first,n-count.second,index+1);
        }
        exclude=rec(strs,m,n,index+1);
        return max(include,exclude);
    }
    int memo(vector<string>& strs,int m,int n,int index,vector<vector<vector<int>>> &dp){
        if(index>=strs.size()) return 0;
        if(dp[index][m][n]!=-1) return dp[index][m][n];
        int include=0,exclude=0;
        pair<int,int> count=check(strs[index]);
        if(count.first<=m && count.second<=n){
            include=1+memo(strs,m-count.first,n-count.second,index+1,dp);
        }
        exclude=memo(strs,m,n,index+1,dp);
        return dp[index][m][n]=max(include,exclude);
    }
    int bottumup(vector<string>& strs,int m1,int n1){
        vector<vector<vector<int>>> dp(strs.size()+1,vector<vector<int>>(m1+1,vector<int>(n1+1,0)));
        for(int index=strs.size()-1;index>=0;index--){
            for(int m=0;m<=m1;m++){
                for(int n=0;n<=n1;n++){
                    int include=0,exclude=0;
                    pair<int,int> count=check(strs[index]);
                    if(count.first<=m && count.second<=n){
                        include=1+dp[index+1][m-count.first][n-count.second];
                    }
                    exclude=dp[index+1][m][n];
                    dp[index][m][n]=max(include,exclude);
                }
            }
        }
        return dp[0][m1][n1];
    }
    
    int findMaxForm(vector<string>& strs, int m, int n) {
        return bottumup(strs,m,n);
        /* vector<vector<vector<int>>> dp(strs.size()+1,vector<vector<int>>(m+1,vector<int>(n+1,-1)));
        return memo(strs,m,n,0,dp); */
        //return rec(strs,m,n,0);
    }
};
