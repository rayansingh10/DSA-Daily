https://leetcode.com/problems/k-th-smallest-prime-fraction/

//2approach
class Solution {
public:
    vector<int> kthSmallestPrimeFraction(vector<int>& arr, int k) {
        priority_queue<pair<double, pair<int, int>>> m;
        int n = arr.size();
        for(int i = 0; i < n - 1; i++) {
            for(int j =i + 1; j < n; j++) {
                m.push({((double) arr[i] / arr[j]), {arr[i], arr[j]}});

                if(m.size() > k) {
                    m.pop();
                }
            }
        }

        auto ans = m.top().second;
        return {ans.first, ans.second};
    }
};
---------------------------------------------------------------------------------------------------------------------------------------------------
//best approach-binary search
class Solution {
public:
    vector<int> findshort(double mid,vector<int> &arr){
        int j=0,num=0,d=0,total=0;
        double maxi=0;
        int n=arr.size();
        for(int i=0;i<n-1;i++){
            while(j<n && arr[i]>=arr[j]*mid) j++;
            total+=n-j;
            if(j<n && maxi < (double)arr[i]/arr[j]){
                maxi=arr[i]*1.0/arr[j];
                num=arr[i];
                d=arr[j];
            }
        }
        return {total,num,d};
    }
    vector<int> kthSmallestPrimeFraction(vector<int>& arr, int k) {
        double l=0,r=1.0;
        while(l<r){
            double mid=l+(r-l)/2;
            auto temp=findshort(mid,arr);
            if(temp[0]==k){
                return {temp[1],temp[2]};
            }
            else if (temp[0]>k){
                r=mid;
            }
            else l=mid;
        }
        return {};
    }
};
