https://leetcode.com/problems/n-th-tribonacci-number/description/



class Solution {
public:
    //recursion is easy but will give time complexity due to 3^n calls
    int tribonacci(int n) {
        if(n==0) return 0;
        if(n==1 || n==2) return 1;
        //o(1) space since not using n as parameter
        vector<int> f(38,0);
        f[1]=f[2]=1;
        for(int i=3;i<=n;i++){
            f[i]=f[i-1]+f[i-2]+f[i-3];
        }
        return f[n];
    }
};
