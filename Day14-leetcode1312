https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/
//2 approach given below //


class Solution {
public:
    int rec(string& s,int start,int end){
        if(start>=end) return 0;
        if(s[start]!=s[end]){
            //front insert
            int front=1+rec(s,start,end-1);
            int last=1+rec(s,start+1,end);
            return min(front,last);
        }
        return rec(s,start+1,end-1);
    }
    int memo(string& s,int start,int end,vector<vector<int>> &dp){
        if(start>=end) return 0;
        if(dp[start][end]!=-1) return dp[start][end];
        if(s[start]!=s[end]){
            //front insert
            int front=1+memo(s,start,end-1,dp);
            int last=1+memo(s,start+1,end,dp);
            return dp[start][end]=min(front,last);
        }
        return dp[start][end]=memo(s,start+1,end-1,dp);
    }
    int bottum(string& s){
        vector<vector<int>> dp(s.size()+1,vector<int>(s.size()+1,0));
        for(int start=s.size()-1;start>=0;start--){
            for(int end=0;end<s.size();end++){
                if(start>=end) continue;
                if(s[start]!=s[end]){
                    //front insert
                    int front=1+dp[start][end-1];
                    int last=1+dp[start+1][end];
                    dp[start][end]=min(front,last);
                }
                else dp[start][end]=dp[start+1][end-1];
            }
        }
        return dp[0][s.size()-1];
    }
    int minInsertions(string s) {
        return bottum(s);
        /* vector<vector<int>> dp(s.size()+1,vector<int>(s.size()+1,-1));
        return memo(s,0,s.size()-1,dp); */
       //return rec(s,0,s.size()-1);
    }
};


//2nd approach-using longest palindromic subsequence 
int tabulationso(string &a,string &b){
        vector<int> curr(b.length()+1,0);
        vector<int> next(b.length()+1,0);
        for(int i=a.length()-1;i>=0;i--){
            for(int j=b.length()-1;j>=0;j--){
                int ans=0;
                if(a[i]==b[j]) ans=1+next[j+1];
                else{
                    ans=max(next[j],curr[j+1]);
                }
                curr[j]=ans;
            }
            next=curr;
        }
        return next[0];
    }
    int longestPalindromeSubseq(string &s) {
        string a=s;
        reverse(s.begin(),s.end());
        return tabulationso(a,s);
    }
    int minInsertions(string s) {
        //length of longest palindromic subsequence 
        int l=longestPalindromeSubseq(s);
        //characters not involved in longest palindromic subsequence will be reuired to make it 
        //palindrome
        return s.size()-l;
    }
