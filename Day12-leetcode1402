https://leetcode.com/problems/reducing-dishes/

class Solution {
public:
    //from recursion to memo to bottum up to space opt 
    int rec(vector<int>& s,int index,int t){
        if(index>=s.size()) return 0;
        int include=(s[index]*t) + rec(s,index+1,t+1);
        int exclude=rec(s,index+1,t);
        return max(include,exclude);
    }
    int memo(vector<int>& s,int index,int t,vector<vector<int>>& dp){
        if(index>=s.size()) return 0;
        if(dp[index][t]!=-1) return dp[index][t];
        int include=(s[index]*t) + memo(s,index+1,t+1,dp);
        int exclude=memo(s,index+1,t,dp);
        return dp[index][t]=max(include,exclude);
    }
    int bottum(vector<int>& s){
        vector<vector<int>> dp(s.size()+1,vector<int>(s.size()+2,0));
        for(int index=s.size()-1;index>=0;index--){
            for(int t=s.size();t>=1;t--){
                int include=(s[index]*t) + dp[index+1][t+1];
                int exclude=dp[index+1][t];
                dp[index][t]=max(include,exclude);
            }
        }
        return dp[0][1];
    }
    int spaceopt(vector<int>& s){
        vector<int> curr(s.size()+2,0);
        vector<int> next(s.size()+2,0);
        for(int index=s.size()-1;index>=0;index--){
            for(int t=s.size();t>=1;t--){
                int include=(s[index]*t) + next[t+1];
                int exclude=next[t];
                curr[t]=max(include,exclude);
            }
            next=curr;
        }
        return next[1];
    }
    int maxSatisfaction(vector<int>& satisfaction) {
        sort(satisfaction.begin(),satisfaction.end());
        return spaceopt(satisfaction);
        //return bottum(satisfaction);
        /* vector<vector<int>> dp(satisfaction.size()+1,vector<int>(satisfaction.size()+1,-1));
        return memo(satisfaction,0,1,dp); */
        //return rec(satisfaction,0,1);
    }
};
