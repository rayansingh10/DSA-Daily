https://leetcode.com/problems/sudoku-solver/description/

class Solution {
public:
    bool check(vector<vector<char>>& board,int row,int col,char k){
        for(int i=0;i<9;i++){
            //check whole row  
            if(board[row][i]==k) return false;
            //check whole column 
            if(board[i][col]==k) return false;
            int r=(3*(row/3))+i/3;
            int c=(3*(col/3))+(i%3);
            //check sub-matrix 3x3
            if(board[r][c]==k) return false;
        }
        return true;
    }
    bool solve(vector<vector<char>>& board){
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                if(board[i][j]=='.'){
                    for(char k='1';k<='9';k++){
                        if(check(board,i,j,k)){
                            board[i][j]=k;
                            if(solve(board)) return true;
                            board[i][j]='.';
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
};
