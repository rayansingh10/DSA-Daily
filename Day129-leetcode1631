https://leetcode.com/problems/path-with-minimum-effort/description/

class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        int row=heights.size();
        int col=heights[0].size();
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,
        greater<pair<int,pair<int,int>>>> q;
        q.push({0,{0,0}});
        vector<vector<int>> dis(row,vector<int> (col,INT_MAX));
        dis[0][0]= 0;
        while(!q.empty()){
            auto temp=q.top();
            q.pop();
            int maxd=temp.first;
            int x=temp.second.first;
            int y=temp.second.second;
            if(x==row-1 && y==col-1) return dis[x][y];
            int dx[]= {-1,1,0,0};
            int dy[]= {0,0,-1,1};
            for(int i=0;i<4;i++){
                int newx=x+dx[i];
                int newy=y+dy[i];
                if(newx>=0 && newx<row && newy>=0 && newy<col ){
                    int td=abs(heights[x][y]-heights[newx][newy]);
                    td=max(td,maxd);
                    if(td<dis[newx][newy]){
                        dis[newx][newy]=td;
                        q.push({td,{newx,newy}});
                    }
                }
            }
        }
        return 0;
    }
};
