https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/description/

//approach from recursion to dp(topdown) to dp[bottum up]


class Solution {
public:
    int rec(string &s1,string &s2,int i,int j){
        int cost=0;
        if(i>=s1.size() || j>=s2.size()){
            for(int x=i;x<s1.size();x++) cost=cost+s1[x];
            for(int x=j;x<s2.size();x++) cost=cost+s2[x];
        }
        else if(s1[i]==s2[j]) cost=rec(s1,s2,i+1,j+1);
        else{
            cost=min(s2[j]+rec(s1,s2,i,j+1),s1[i]+rec(s1,s2,i+1,j));
        }
        return cost;  
    }
    int memo(string &s1,string &s2,int i,int j,vector<vector<int>> &dp){
        if(dp[i][j]!=-1) return dp[i][j];
        int cost=0;
        if(i>=s1.size() || j>=s2.size()){
            for(int x=i;x<s1.size();x++) cost=cost+s1[x];
            for(int x=j;x<s2.size();x++) cost=cost+s2[x];
        }
        else if(s1[i]==s2[j]) cost=memo(s1,s2,i+1,j+1,dp);
        else{
            cost=min(s2[j]+memo(s1,s2,i,j+1,dp),s1[i]+memo(s1,s2,i+1,j,dp));
        }
        return dp[i][j]=cost ;  
    }
    int bottum(string &s1,string &s2){
        vector<vector<int>> dp(s1.size()+1,vector<int>(s2.size()+1,0));
        for(int i=s2.size()-1;i>=0;i--){
            dp[s1.size()][i]=s2[i]+dp[s1.size()][i+1];
        }
        for(int i=s1.size()-1;i>=0;i--){
            dp[i][s2.size()]=s1[i]+dp[i+1][s2.size()];
        }
        for(int i=s1.size()-1;i>=0;i--){
            for(int j=s2.size()-1;j>=0;j--){
                int ans=0;
                if(s1[i]==s2[j]) ans=dp[i+1][j+1];
                else{
                    ans=min(s1[i]+dp[i+1][j],s2[j]+dp[i][j+1]);
                }
                dp[i][j]=ans;
            }
        }
        return dp[0][0];
    }
    int minimumDeleteSum(string s1, string s2) {
        return bottum(s1,s2);
        /* vector<vector<int>> dp(s1.size()+1,vector<int>(s2.size()+1,-1));
        return memo(s1,s2,0,0,dp); */
        //return rec(s1,s2,0,0);
    }
};
